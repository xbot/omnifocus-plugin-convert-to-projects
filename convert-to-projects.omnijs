/*{
    "type": "action",
    "targets": ["omnifocus"],
    "author": "Donie",
    "identifier": "org.0x3f.convert_to_projects",
    "version": "2.0",
    "description": "Convert selected tasks to projects and move them to the selected folder.",
    "label": "Convert to Projects",
    "shortLabel": "Convert to Projects",
    "paletteLabel": "Convert to Projects",
    "image": "arrowshape.zigzag.right"
}*/
(() => {
    const preferences = new Preferences();

    const devPlugin = PlugIn.find('org.0x3f.libdev');

    if (devPlugin === null) {
        throw new Error('Dev library plugin not installed.');
    }

    const libdev = devPlugin.library('libdev');

    const FIELD_FOLDERS = 'Folders';

    const MENU_END_OF_LIBRARY = 'library_ending';

    const PREF_LAST_SELECTED_FOLDER = 'lastSelectedFolder';

    var action = new PlugIn.Action(function (selection, sender) {
        try {
            const folderIds   = flattenedFolders.map(folder => folder.id.primaryKey);
            const folderNames = flattenedFolders.map((folder) => {
                let label = folder.name;

                while (folder.parent !== null) {
                    label = folder.parent.name + ' > ' + label;
                    folder = folder.parent;
                }

                return label;
            });

            folderNames.push('Append to the end of library');
            folderIds.push(MENU_END_OF_LIBRARY);

            const selectedFolderId = libdev.getString(preferences, PREF_LAST_SELECTED_FOLDER, folderIds[0]);

            const foldersMenu = new Form.Field.Option(
                FIELD_FOLDERS,
                null,
                folderIds,
                folderNames,
                selectedFolderId
            );

            const form = new Form();

            form.addField(foldersMenu);

            form.validate = function (formObject) { return true; };

            const formPromise = form.show('Convert to Projects', 'Convert');

            formPromise.then((formObject) => {
                const selectedFolderId = formObject.values[FIELD_FOLDERS];

                const selectedFolder =
                    selectedFolderId === MENU_END_OF_LIBRARY
                        ? library.ending
                        : Folder.byIdentifier(selectedFolderId);

                if (selectedFolder === null) {
                    throw { name: 'InvalidFolder', message: 'Invalid folder selected.', };
                }

                const newProjects = convertTasksToProjects(selection.tasks, selectedFolder);

                const itemIDs = newProjects.map(project => project.id.primaryKey);

                const urlString = 'omnifocus:///task/' + itemIDs.join(',');

                URL.fromString(urlString).open();

                preferences.write(PREF_LAST_SELECTED_FOLDER, selectedFolderId);
            });
        } catch (err) {
            new Alert(err.name, err.message).show();
        }
    });

    action.validate = function (selection, sender) {
        return selection.tasks.length > 0;
    };

    return action;
})();
